pipeline {
    agent any

    stages {
        stage('Git Checkout (Built-In-Node)') {
            steps {
                git branch: 'main', url: 'https://github.com/s009desh/healtcare.git'
            }
        }

        stage('Ansible Deployment (Built-In-Node)') {
            steps {
                script {
                    ansiblePlaybook become: true, credentialsId: 'ansible', disableHostKeyChecking: true, installation: 'ansible', inventory: '/etc/ansible/hosts', playbook: 'ansible-playbook.yml', vaultTmpPath: ''
                }
            }
        }

        stage('Git Checkout and Maven Build (Jenkins Slave)') {
            agent { label 'jenkins_slave' }
            steps {
                git branch: 'main', url: 'https://github.com/s009desh/healtcare.git'
                sh 'mvn clean package'
            }
        }
        
        stage('Publish HTML Report (Jenkins Slave)') {
            agent { label 'jenkins_slave' }
            steps {
                publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: '/home/jenkins/workspace/testing/target/surefire-reports', reportFiles: 'index.html', reportName: 'HTML Report', reportTitles: '', useWrapperFileDirectly: true])
            }
        }
        
        stage('Building the Docker image (Jenkins Slave)') {
            agent { label 'jenkins_slave' }
            steps {
                sh 'docker build -t s009/healthcare:1.0 .'
            }
        }
        
        stage('Pushing into dockerhub (Jenkins Slave)') {
            agent { label 'jenkins_slave' }
            steps {
                withCredentials([string(credentialsId: 'dockerhub', variable: 'dockerpass')]) {
                    sh "docker login -u s009 -p \${dockerpass}"
                    sh "docker push s009/healthcare:1.0"
                }
            }
        }
        
        stage('Sending yaml file to production servers (Jenkins Slave)') {
            agent { label 'jenkins_slave' }
            steps {
                sshPublisher(publishers: [sshPublisherDesc(configName: 'kubernetes', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '''kubectl apply -f healtcare.yml''', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '.', remoteDirectorySDF: false, removePrefix: '', sourceFiles: '*.yml')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
            }
        }
    }
}